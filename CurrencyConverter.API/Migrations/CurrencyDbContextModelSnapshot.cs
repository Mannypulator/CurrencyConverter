// <auto-generated />
using System;
using CurrencyConverter.API.Infrastructure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CurrencyConverter.API.Migrations
{
    [DbContext(typeof(CurrencyDbContext))]
    partial class CurrencyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.20");

            modelBuilder.Entity("CurrencyConverter.API.Domain.Entity.ApiKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyValue")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RequestsPerHour")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("KeyValue")
                        .IsUnique();

                    b.ToTable("ApiKeys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 19, 16, 7, 10, 545, DateTimeKind.Utc).AddTicks(7240),
                            IsActive = true,
                            KeyValue = "demo-key-123456789",
                            Name = "Demo API Key",
                            RequestsPerHour = 1000
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 19, 16, 7, 10, 545, DateTimeKind.Utc).AddTicks(7250),
                            IsActive = true,
                            KeyValue = "premium-key-987654321",
                            Name = "Premium API Key",
                            RequestsPerHour = 5000
                        });
                });

            modelBuilder.Entity("CurrencyConverter.API.Domain.Entity.ApiKeyUsage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApiKeyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResponseStatusCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RequestTime");

                    b.HasIndex("ApiKeyId", "RequestTime");

                    b.ToTable("ApiKeyUsages");
                });

            modelBuilder.Entity("CurrencyConverter.API.Domain.Entity.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Code = "USD",
                            CreatedAt = new DateTime(2025, 9, 19, 16, 7, 10, 545, DateTimeKind.Utc).AddTicks(6720),
                            IsActive = true,
                            Name = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Code = "EUR",
                            CreatedAt = new DateTime(2025, 9, 19, 16, 7, 10, 545, DateTimeKind.Utc).AddTicks(6730),
                            IsActive = true,
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Code = "GBP",
                            CreatedAt = new DateTime(2025, 9, 19, 16, 7, 10, 545, DateTimeKind.Utc).AddTicks(6730),
                            IsActive = true,
                            Name = "British Pound",
                            Symbol = "£"
                        },
                        new
                        {
                            Code = "JPY",
                            CreatedAt = new DateTime(2025, 9, 19, 16, 7, 10, 545, DateTimeKind.Utc).AddTicks(6730),
                            IsActive = true,
                            Name = "Japanese Yen",
                            Symbol = "¥"
                        },
                        new
                        {
                            Code = "CAD",
                            CreatedAt = new DateTime(2025, 9, 19, 16, 7, 10, 545, DateTimeKind.Utc).AddTicks(6740),
                            IsActive = true,
                            Name = "Canadian Dollar",
                            Symbol = "C$"
                        },
                        new
                        {
                            Code = "AUD",
                            CreatedAt = new DateTime(2025, 9, 19, 16, 7, 10, 545, DateTimeKind.Utc).AddTicks(6740),
                            IsActive = true,
                            Name = "Australian Dollar",
                            Symbol = "A$"
                        },
                        new
                        {
                            Code = "CHF",
                            CreatedAt = new DateTime(2025, 9, 19, 16, 7, 10, 545, DateTimeKind.Utc).AddTicks(6850),
                            IsActive = true,
                            Name = "Swiss Franc",
                            Symbol = "CHF"
                        },
                        new
                        {
                            Code = "CNY",
                            CreatedAt = new DateTime(2025, 9, 19, 16, 7, 10, 545, DateTimeKind.Utc).AddTicks(6850),
                            IsActive = true,
                            Name = "Chinese Yuan",
                            Symbol = "¥"
                        });
                });

            modelBuilder.Entity("CurrencyConverter.API.Domain.Entity.ExchangeRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsHistorical")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("TargetCurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("IsHistorical");

                    b.HasIndex("TargetCurrencyCode");

                    b.HasIndex("BaseCurrencyCode", "TargetCurrencyCode", "Date")
                        .IsUnique();

                    b.HasIndex("BaseCurrencyCode", "TargetCurrencyCode", "IsHistorical");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("CurrencyConverter.API.Domain.Entity.ApiKeyUsage", b =>
                {
                    b.HasOne("CurrencyConverter.API.Domain.Entity.ApiKey", "ApiKey")
                        .WithMany("UsageHistory")
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");
                });

            modelBuilder.Entity("CurrencyConverter.API.Domain.Entity.ExchangeRate", b =>
                {
                    b.HasOne("CurrencyConverter.API.Domain.Entity.Currency", "BaseCurrency")
                        .WithMany("BaseExchangeRates")
                        .HasForeignKey("BaseCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CurrencyConverter.API.Domain.Entity.Currency", "TargetCurrency")
                        .WithMany("TargetExchangeRates")
                        .HasForeignKey("TargetCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseCurrency");

                    b.Navigation("TargetCurrency");
                });

            modelBuilder.Entity("CurrencyConverter.API.Domain.Entity.ApiKey", b =>
                {
                    b.Navigation("UsageHistory");
                });

            modelBuilder.Entity("CurrencyConverter.API.Domain.Entity.Currency", b =>
                {
                    b.Navigation("BaseExchangeRates");

                    b.Navigation("TargetExchangeRates");
                });
#pragma warning restore 612, 618
        }
    }
}
